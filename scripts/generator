#!/usr/bin/python3

import argparse
import collections
import json
import os
import queue
import re
import resource
import shlex
import sqlite3
import subprocess
import sys
import tempfile
import time
import random

TIMEOUT = 1000

parser = argparse.ArgumentParser(description='generator for fpg')
parser.add_argument('-s', '--seed',     dest='seed',  type=int, default=-1, help='random seed for fpg (if not set, use random seed)')
parser.add_argument('-H', '--holes',    dest='holes', type=int, default=0,   help='number of holes, will be each set to some random value')
parser.add_argument('-n', '--filename', dest='out',   default='fpg-poly',   help='prefix of output file filename')
parser.add_argument('fpg',       type=str, help='fpg binary')
parser.add_argument('startsize', type=int, help='output start-size of polygon (int)')
parser.add_argument('endsize',   type=int, help='output end-size of polygon (int)')
parser.add_argument('stepsize',  type=int, default=10, help='step size of produced output')
args = parser.parse_args()

def eprint(*args):
    print(*args, file=sys.stderr)

def limit_virtual_memory():
    MAX_VIRTUAL_MEMORY = 10 * 1024 * 1024 *1024 # 10 GB
    resource.setrlimit(resource.RLIMIT_AS, (MAX_VIRTUAL_MEMORY, resource.RLIM_INFINITY))

def make_decent_hole_list(size,num_holes):
    available_vertices = random.randint(3,size/2)
    holes = []
    while available_vertices > 2 and len(holes) < num_holes:
        holes.append(random.randint(3,available_vertices))
        available_vertices -= holes[-1]

    return holes

def run_fpg(fpg, size, seed, name, args):
    cmd = []
    cmd.append(fpg)
    
    filename = name
    if seed > 0:
        cmd.extend(["--seed",str(seed)])
        filename += "_s" + '{}'.format(seed)

    filename += "_" + '{:010.0f}'.format(size)
    
    if args.holes > 0:
        holes = make_decent_hole_list(size,args.holes)
        filename += "_h" + '{}'.format(len(holes))
        cmd.extend(["--holesizes",','.join([str(i) for i in holes])])

    
    cmd.append(str(size))
    cmd.append(filename + ".graphml")
    print(cmd)
    
    timeout = TIMEOUT
    try:
        output = subprocess.run(
          cmd,
          close_fds=False,
          stdin=subprocess.DEVNULL,
          stdout=subprocess.DEVNULL,
          stderr=subprocess.DEVNULL,
          timeout=timeout,
          check=True,
          preexec_fn=limit_virtual_memory)
    except subprocess.CalledProcessError as e:
        return False
    except subprocess.TimeoutExpired as e:
        return False

    return True


if not os.path.exists(args.fpg):
  eprint("Fpg binary", args.fpg, "does not exist.")
  sys.exit(1)

step_cnt     = 0
current_size = args.startsize + (args.stepsize * step_cnt)

while current_size < args.endsize:
    run_fpg(args.fpg, current_size, args.seed, args.out, args)
    
    step_cnt+=1
    current_size = args.startsize + (args.stepsize * step_cnt)

